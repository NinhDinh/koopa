<?xml version="1.0" encoding="UTF-8"?>
<project name="Koopa" default="build" basedir=".">

	<target name="clean">
		<delete dir="build/" />
	</target>

	<target name="build" depends="clean,core,core-tests,cobol,cobol-tests,apps,examples">
	</target>

	<target name="run-tests" depends="run-core-tests,run-cobol-tests,run-cobol-regression-tests">
	</target>

	<!-- CORE / ISLAND PARSER GENERATOR -->

	<target name="core" depends="core-generate,core-compile">
	</target>

	<target name="core-generate">
		<echo>Generating the Koopa grammar generator...</echo>
		<antlr-gen grammar="src/core/koopa/core/grammars/generator/KG.g" />
		<antlr-gen2 grammar="src/core/koopa/core/grammars/generator/KGTreeParser.g" tokens="src/core/koopa/core/grammars/generator/" />
		<antlr-gen2 grammar="src/core/koopa/core/grammars/generator/KGGenerator.g" tokens="src/core/koopa/core/grammars/generator/" />

		<echo>Generating the Koopa tree parser generator...</echo>
		<copy file="src/core/koopa/core/grammars/generator/KG.tokens" tofile="src/core/koopa/core/treegrammars/generator/KG.tokens" />
		<antlr-gen2 grammar="src/core/koopa/core/treegrammars/generator/TreeGrammarGenerator.g" tokens="src/core/koopa/core/treegrammars/generator/" />

		<echo>Generating the Koopa test generator...</echo>
		<antlr-gen grammar="src/core/koopa/core/grammars/test/generator/Stage.g" />
		<antlr-gen2 grammar="src/core/koopa/core/grammars/test/generator/StageTreeParser.g" tokens="src/core/koopa/core/grammars/test/generator/" />
		<antlr-gen2 grammar="src/core/koopa/core/grammars/test/generator/StageGenerator.g" tokens="src/core/koopa/core/grammars/test/generator/" />
	</target>

	<target name="core-build">
		<mkdir dir="build/" />
	</target>

	<target name="core-compile" depends="core-build,revision-number">
		<echo>Compiling Koopa's core...</echo>
		<javac srcdir="src/core/" destdir="build/" debug="on" source="1.5">
			<classpath>
				<fileset dir="lib">
					<include name="*.jar" />
				</fileset>
			</classpath>
		</javac>

		<echo>Copying additional resources...</echo>
		<copy todir="build/">
			<fileset dir="src/core/" excludes="**/*.java,**/*.g" />
		</copy>
	</target>

	<!-- CORE TESTS -->

	<target name="core-tests" depends="core">
		<echo>Generating unit tests...</echo>
		<generate-unit-test path="test/core/koopa/cobol/grammar/test/core/" />

		<echo>Compiling unit tests...</echo>
		<javac srcdir="test/core/" destdir="build/" debug="on" source="1.5">
			<classpath>
				<fileset dir="build/" />
				<fileset dir="lib">
					<include name="*.jar" />
				</fileset>
			</classpath>
		</javac>

		<echo>Copying additional resources...</echo>
		<copy todir="build/">
			<fileset dir="test/core/" excludes="**/*.java,**/*.g" />
		</copy>
	</target>

	<target name="run-core-tests">
		<junit fork="yes" printsummary="yes" haltonfailure="yes" showoutput="yes">
			<classpath>
				<pathelement location="build/" />
				<fileset dir="lib">
					<include name="*.jar" />
				</fileset>
			</classpath>

			<formatter type="brief" usefile="no" />

			<test name="koopa.core.data.test.TokenTest" />
			<test name="koopa.core.data.test.TokensTest" />

			<test name="koopa.core.parsers.test.ParseStreamTest" />

			<test name="koopa.core.grammars.test.KoopaGrammarTest" />
			<test name="koopa.core.grammars.test.DecimalGrammarTest" />
			
			<test name="koopa.core.sources.test.CoreSourcesValidationTest" />
		</junit>
	</target>

	<!-- COBOL PARSER -->

	<target name="cobol-preprocessing" depends="core">
		<echo>Generating the Cobol Preprocessing parser...</echo>
		<kgg name="CobolPreprocessing" path="src/cobol/koopa/cobol/grammar/preprocessing/" />
	</target>

	<target name="cobol" depends="cobol-preprocessing">
		<echo>Generating the Cobol parser...</echo>
		<kgg name="Cobol" path="src/cobol/koopa/cobol/grammar/" />

		<echo>Compiling Cobol parser...</echo>
		<javac srcdir="src/cobol/" destdir="build/" debug="on" source="1.5">
			<classpath>
				<fileset dir="build/" />
				<fileset dir="lib">
					<include name="*.jar" />
				</fileset>
			</classpath>
		</javac>

		<echo>Copying additional grammar resources...</echo>
		<copy todir="build/">
			<fileset dir="src/cobol/" excludes="**/*.java,**/*.g" />
		</copy>
	</target>

	<!-- COBOL PARSER TESTS -->

	<target name="cobol-tests" depends="core,core-tests,cobol">
		<echo>Generating unit tests...</echo>
		<generate-unit-test path="test/cobol/koopa/cobol/grammar/test/" />

		<echo>Compiling unit tests...</echo>
		<javac srcdir="test/cobol/" destdir="build/" debug="on" source="1.5">
			<classpath>
				<fileset dir="build/" />
				<fileset dir="lib">
					<include name="*.jar" />
				</fileset>
			</classpath>
		</javac>

		<echo>Copying additional resources...</echo>
		<copy todir="build/">
			<fileset dir="test/cobol/" excludes="**/*.java,**/*.g" />
		</copy>
	</target>

	<target name="run-cobol-tests">
		<junit fork="yes" printsummary="yes" haltonfailure="yes" showoutput="yes">
			<classpath>
				<pathelement location="build/" />
				<fileset dir="lib">
					<include name="*.jar" />
				</fileset>
			</classpath>

			<formatter type="brief" usefile="no" />

			<test name="koopa.cobol.sources.test.CobolSourcesValidationTest" />
			<test name="koopa.cobol.grammar.test.CobolGrammarTests" />
		</junit>
	</target>

	<target name="run-cobol-regression-tests">
		<junit fork="yes" printsummary="yes" haltonfailure="yes" showoutput="yes">
			<classpath>
				<pathelement location="build/" />
				<fileset dir="lib">
					<include name="*.jar" />
				</fileset>
			</classpath>

			<formatter type="brief" usefile="no" />

			<test name="koopa.cobol.parser.test.Cobol85RegressionTest" />
			<test name="koopa.cobol.parser.test.Cobol85PreprocessingTest" />
		</junit>
	</target>

	<!-- APPLICATIONS -->

	<target name="apps" depends="core,cobol">
		<echo>Generating the Cobol outline parser...</echo>
		<generate-tree-parser name="CobolOutline" path="src/apps/koopa/app/components/outline/" />

		<echo>Compiling processing classes...</echo>
		<javac srcdir="src/apps/" destdir="build/" debug="on" source="1.5">
			<classpath>
				<fileset dir="lib">
					<include name="*.jar" />
				</fileset>
			</classpath>
		</javac>

		<echo>Copying additional resources...</echo>
		<copy todir="build/">
			<fileset dir="src/apps/" excludes="**/*.java,**/*.g" />
		</copy>
	</target>

	<!-- EXAMPLES -->

	<target name="examples" depends="core,cobol">
		<echo>Generating CobolStructure tree parser...</echo>
		<generate-tree-parser name="CobolStructure" path="examples/treegrammars/koopa/examples/treegrammars/" />
		
		<echo>Compiling example classes...</echo>
		<javac srcdir="examples/jaxen/" destdir="build/" debug="on" source="1.5">
			<classpath>
				<fileset dir="lib">
					<include name="*.jar" />
				</fileset>
			</classpath>
		</javac>
		<javac srcdir="examples/treegrammars/" destdir="build/" debug="on" source="1.5">
			<classpath>
				<fileset dir="lib">
					<include name="*.jar" />
				</fileset>
			</classpath>
		</javac>

		<echo>Copying additional resources...</echo>
		<copy todir="build/">
			<fileset dir="examples/jaxen/" excludes="**/*.java,**/*.g" />
			<fileset dir="examples/treegrammars/" excludes="**/*.java,**/*.g" />
		</copy>
	</target>

	<!-- PACKAGE -->

	<target name="jar">
		<jar destfile="koopa.jar" filesetmanifest="mergewithoutmain">
			<manifest>
				<attribute name="Main-Class" value="koopa.app.Koopa" />
				<attribute name="Class-Path" value="." />
			</manifest>
			<fileset dir="build" />
			<zipfileset excludes="META-INF/*.SF" src="lib/swingx-1.0.jar" />
			<zipfileset excludes="META-INF/*.SF" src="lib/stringtemplate-3.2.jar" />
			<zipfileset excludes="META-INF/*.SF" src="lib/antlr-2.7.7.jar" />
			<zipfileset excludes="META-INF/*.SF" src="lib/antlr-3.1.1-runtime.jar" />
			<zipfileset excludes="META-INF/*.SF" src="lib/jaxen-1.1.1.jar" />
			<zipfileset excludes="META-INF/*.SF" src="lib/log4j-1.2.16.jar" />
		</jar>
	</target>

	<!-- SVN -->

	<target name="revision-number" depends="core-build">
		<!-- Find out revision number of HEAD. Needs svn installed on local machine. -->
		<exec executable="svnversion" outputproperty="revision" failonerror="false" failifexecutionfails="false">
		</exec>

		<property name="revision" value="unknown" />

		<echo file="build/REVISION" message="${revision}" />
	</target>

	<!-- MACROS -->

	<macrodef name="antlr-gen">
		<attribute name="grammar" />
		<sequential>
			<java classname="org.antlr.Tool" fork="true">
				<classpath>
					<pathelement location="lib/antlr-3.1.1.jar" />
				</classpath>
				<arg value="@{grammar}" />
			</java>
		</sequential>
	</macrodef>

	<macrodef name="antlr-gen2">
		<attribute name="grammar" />
		<attribute name="tokens" />
		<sequential>
			<java classname="org.antlr.Tool" fork="true">
				<classpath>
					<pathelement location="lib/antlr-3.1.1.jar" />
				</classpath>
				<arg value="-lib" />
				<arg value="@{tokens}" />
				<arg value="@{grammar}" />
			</java>
		</sequential>
	</macrodef>

	<macrodef name="kgg">
		<attribute name="name" />
		<attribute name="path" />
		<sequential>
			<java classname="koopa.core.grammars.generator.KGG" fork="true">
				<jvmarg value="-ea" />
				<arg value="@{name}" />
				<arg value="@{path}" />
				<classpath>
					<pathelement path="build/" />
					<fileset dir="lib">
						<include name="*.jar" />
					</fileset>
					<pathelement path="${java.class.path}" />
				</classpath>
			</java>
		</sequential>
	</macrodef>

	<macrodef name="generate-unit-test">
		<attribute name="path" />
		<sequential>
			<java classname="koopa.core.grammars.test.generator.GenerateUnitTests" fork="true">
				<jvmarg value="-ea" />
				<arg value="@{path}" />
				<classpath>
					<pathelement path="build/" />
					<fileset dir="lib">
						<include name="*.jar" />
					</fileset>
					<pathelement path="${java.class.path}" />
				</classpath>
			</java>
		</sequential>
	</macrodef>

	<macrodef name="synchronize-file">
		<attribute name="file" />
		<attribute name="root" />
		<sequential>
			<java classname="koopa.core.util.ANTSynchronize" fork="true">
				<jvmarg value="-ea" />
				<arg value="@{file}" />
				<arg value="@{root}" />
				<classpath>
					<pathelement path="build/" />
					<fileset dir="lib">
						<include name="*.jar" />
					</fileset>
					<pathelement path="${java.class.path}" />
				</classpath>
			</java>
		</sequential>
	</macrodef>

	<macrodef name="generate-tree-parser">
		<attribute name="name" />
		<attribute name="path" />
		<sequential>
			<java classname="koopa.core.treegrammars.generator.KGToTreeGrammar" fork="true">
				<jvmarg value="-ea" />
				<arg value="@{name}" />
				<arg value="@{path}" />
				<classpath>
					<pathelement path="build/" />
					<fileset dir="lib">
						<include name="*.jar" />
					</fileset>
					<pathelement path="${java.class.path}" />
				</classpath>
			</java>
		</sequential>
	</macrodef>

</project>
