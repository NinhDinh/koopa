= Misc. =

* A "longest match" operator ? E.g.: $( identifier | arithmeticExpression ),
  which would classify inputs like "A" as an identifier, but inputs like
  "A + 1" as an arithmetic expression... Length is measured in number of tokens,
  though "furthest position in file" would be equivalent.
* Add caching strategy to testing of tokens. To help prevent duplicate work.
  I.e. if something wasn't an identifier the first time around it won't be 
  any later time either.
* Get rid of the syntax for capturing tokens and native code in the grammars ?
* Fix degenerate results from grammar rules. E.g. a complexCondition can
  degenerate into a simpleCondition. But the AST will still have both...
* Reconsider allowing these intermediate tokenizers. Maybe a listener pattern
  would be better.
* Regression testing. Would be nice if we could do this as a JUnit test.
* Write an ANT target for running the unit tests.
* Remove the structure-shy ANTLR tree parsers and standardize on XML and XPath ?


= Customizing the generated ANTLR tree parser =

Due to a bug in ANTLR I can't use the generated tree parser in a composite
grammar. This means that any actions will have to be placed either in the
original tree parser or a copy of that one. Either way, this is not nice when
we're evolving the grammar.

Bug details: http://www.antlr.org/jira/browse/ANTLR-375;jsessionid=10155AFC751AEEF9A46B87FDBD3DA9DA?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel


= Comment entries =

Error on testsuite/cobol85/OBNC1M.CBL.

"Comment-entry can consist of any combination of characters from the computer
 character set.  Comment-entries can span several lines in Area B.  However,
 they cannot be continued by using a hyphen in the indicator area.  The end of
 comment-entry is the line before the next entry in Area A."

This was obsoleted in the 1985 standard. I'm not sure whether I should bother
with parsing this.


= Save to srcml ? =

http://www.sdml.info/projects/srcml/

