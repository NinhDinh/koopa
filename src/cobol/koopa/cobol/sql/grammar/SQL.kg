grammar SQL extends SQLBase.

# This is a grammar targeted at SQL statements which are embedded in Cobol
# code. The rules assume they are always parsing a single SQL statement,
# and will eat any remaining unidentified tokens as 'unknown'.


def sqlStatement =
    ( includeStatement
    | declareSessionStatement
    | declareCursorStatement
    | selectStatement
    | insertStatement
    | updateStatement
    | deleteStatement
    | openStatement
    | closeStatement
    | rollbackStatement
    | lockTableStatement
    
    | alterStatement
    | createStatement
    | dropStatement
    | renameStatement
    )
end

def includeStatement =
    INCLUDE identifier
end

def declareSessionStatement =
    DECLARE SESSION . identifier
    TABLE
    [unknown: --> eof]
end

def declareCursorStatement =
    DECLARE cursorName [sensitivity] [scrollability] CURSOR

    [holdability]
    [returnability]

    FOR queryExpression [orderBy] [updatability]
    
    [unknown: --> eof]
    
  where def sensitivity     =  (SENSITIVE | INSENSITIVE | ASENSITIVE)     end
  where def scrollability   =  (SCROLL | NO SCROLL)                       end
  where def holdability     =  (WITH HOLD | WITHOUT HOLD)                 end
  where def returnability   =  (WITH RETURN | WITHOUT RETURN)             end
  where def queryExpression =  unknown                                    end
  where def orderBy         =  ORDER BY unknown                           end
  where def updatability    =  FOR ( READ ONLY | UPDATE [ OF unknown ] )  end

  where def unknown =  --> ( ORDER BY | FOR | eof )  end 
end

def selectStatement =
    SELECT

    [ unknown: --> FROM ] from
    [[unknown: --> WHERE] `where]
    [ unknown: --> eof ]

  where def from   =  FROM  tableReferenceList  [unknown]  end
  where def `where =  WHERE [unknown]                      end

  where def unknown =  --> ( FROM | WHERE | GROUP BY | HAVING | WINDOW | eof )  end 
end

def insertStatement =
    INSERT INTO tableName
    [unknown: --> eof]
end

def updateStatement =
    UPDATE targetTable

    [[unknown: --> WHERE] `where]

    [unknown: --> eof]

  where def `where =  WHERE (CURRENT OF unknown | unknown)  end

  where def unknown =  --> eof  end 
end

def deleteStatement = 
    DELETE FROM targetTable
    [--> eof]
end

def openStatement =
    OPEN cursorName [inputUsing]
    
  where def inputUsing =  [USING (unknown: --> eof)]  end
end

def closeStatement =
    CLOSE cursorName
end

def rollbackStatement =
    ROLLBACK
end

def lockTableStatement =
    LOCK TABLE tableName

    [unknown: --> eof]
end

## #############################################################################
## Data Definition Language Statements
## -----------------------------------------------------------------------------

def alterStatement =
    ALTER
    [ subject :
      ( DATABASE                                     # [IBM DB2 SQL Statements]
      | DOMAIN
      | INDEX                                        # [IBM DB2 SQL Statements]
      | [SPECIFIC] FUNCTION                          # [IBM DB2 SQL Statements]
      | MASK                                         # [IBM DB2 SQL Statements]
      | PERMISSION                                   # [IBM DB2 SQL Statements]
      | PROCEDURE                                    # [IBM DB2 SQL Statements]
      | SEQUENCE
      | STOGROUP                                     # [IBM DB2 SQL Statements]
      | TABLE
      | TABLESPACE                                   # [IBM DB2 SQL Statements]
      | (TRANSFORM | TRANSFORMS)
      | TRIGGER                                      # [IBM DB2 SQL Statements]
      | TRUSTED CONTEXT                              # [IBM DB2 SQL Statements]
      | VIEW                                         # [IBM DB2 SQL Statements]
      )
    ]

    [unknown: --> eof]
end


def createStatement =
    CREATE
    [ subject :
      ( [PUBLIC] ALIAS                                # [IBM DB2 SQL Statements]
      | ASSERTION
      | CAST
      | CHARACTER SET
      | COLLATION
      | DATABASE                                      # [IBM DB2 SQL Statements]
      | DOMAIN
      | FUNCTION
      | [UNIQUE [WHERE NOT NULL]]
         INDEX                                        # [IBM DB2 SQL Statements]
      | MASK                                          # [IBM DB2 SQL Statements]
      | [ INSTANCE
        | STATIC
        | CONSTRUCTOR
        ]
        METHOD
      | ORDERING
      | PERMISSION                                    # [IBM DB2 SQL Statements]
      | PROCEDURE
      | ROLE
      | SCHEMA
      | SEQUENCE
      | SPECIFIC METHOD
      | STOGROUP                                      # [IBM DB2 SQL Statements]
      | SYNONYM                                       # [IBM DB2 SQL Statements]
      | [ (GLOBAL | LOCAL) TEMPORARY
        | AUXILIARY                                   # [IBM DB2 SQL Statements]
        | AUX                                         # [IBM DB2 SQL Statements]
        ] 
        TABLE
      | [LOB]
        TABLESPACE                                    # [IBM DB2 SQL Statements]
      | (TRANSFORM | TRANSFORMS)
      | TRANSLATION
      | TRIGGER
      | TRUSTED CONTEXT                               # [IBM DB2 SQL Statements]
      | TYPE
      | VARIABLE                                      # [IBM DB2 SQL Statements]
      | [RECURSIVE] VIEW
      )
    ]

    [unknown: --> eof]
end


def dropStatement =
    DROP
    [ subject :
      ( [PUBLIC] ALIAS                               # [IBM DB2 SQL Statements]
      | CONSTRAINT
      | DATABASE                                     # [IBM DB2 SQL Statements]
      | [SPECIFIC] FUNCTION                          # [IBM DB2 SQL Statements]
      | INDEX                                        # [IBM DB2 SQL Statements]
      | MASK                                         # [IBM DB2 SQL Statements]
      | PACKAGE                                      # [IBM DB2 SQL Statements]
      | PERMISSION                                   # [IBM DB2 SQL Statements]
      | PROCEDURE                                    # [IBM DB2 SQL Statements]
      | ROLE                                         # [IBM DB2 SQL Statements]
      | SCHEMA
      | SEQUENCE                                     # [IBM DB2 SQL Statements]
      | STOGROUP                                     # [IBM DB2 SQL Statements]
      | SYNONYM                                      # [IBM DB2 SQL Statements]
      | TABLE
      | TABLESPACE                                   # [IBM DB2 SQL Statements]
      | TRIGGER                                      # [IBM DB2 SQL Statements]
      | TRUSTED CONTEXT                              # [IBM DB2 SQL Statements]
      | TYPE                                         # [IBM DB2 SQL Statements]
      | VARIABLE                                     # [IBM DB2 SQL Statements]
      | VIEW
      )
    ]

    [unknown: --> eof]
end

def renameStatement =
    RENAME [TABLE | INDEX]

    [unknown: --> eof]
end


## #############################################################################
## Low level stuff.
## -----------------------------------------------------------------------------

def identifier          =  (regularIdentifier | delimitedIdentifier)  end
def regularIdentifier   =  _                                          end
def delimitedIdentifier =  @CHARACTER_STRING @STRING_LITERAL _        end


def tableReferenceList =  tableReference (',' tableReference)*  end

# Note: this one is a huge oversimplification...
def tableReference =  tableName  end


def cursorName =
   [ module . ] identifier

  where def module =  MODULE  end
end

def tableName =
    ( catalogName . ( module | schemaName ) . identifier
    |               ( module | schemaName ) . identifier
    |                                         identifier
    )

  where def module      =  MODULE      end
  where def schemaName  =  identifier  end
  where def catalogName =  identifier  end
end

def targetTable =  ( ONLY '(' tableName ')' | tableName )   end



# -----------------------------------------------------------------------------
#
# References
#
# [SQL-2003 BNF]
#   http://savage.net.au/SQL/sql-2003-2.bnf
#
# [IBM DB2 SQL Statements]
#   http://www.ibm.com/support/knowledgecenter/en/SSEPEK_11.0.0/com.ibm.db2z11.doc.sqlref/src/tpc/db2z_sql_statementsintro.html
#
