grammar CobolPreprocessing extends CobolPreprocessingBase.

## #############################################################################
## Top level definitions.
## -----------------------------------------------------------------------------

# Preprocessing.
def preprocessing =
	( (--> preprocessingDirective) preprocessingDirective )*
end

def preprocessingDirective =
	copyStatement
end


## #############################################################################
## COPY statement.
## -----------------------------------------------------------------------------

def copyStatement =
    COPY textName [ (OF | IN) libraryName ]
    [SUPPRESS]
    [copyReplacingPhrase]
    .
end

def copyReplacingPhrase =
	REPLACING
	(copyReplacementInstruction)+
end

def copyReplacementInstruction =
	[leading | trailing] copyOperandName BY copyOperandName
end

def leading  =  LEADING   end
def trailing =  TRAILING  end

def copyOperandName =
	(pseudoLiteral | literal | cobolWord)
end


## #############################################################################
## Lower level stuff.
## -----------------------------------------------------------------------------

def textName =
    ( cobolWord
    | alphanumericLiteral
    )
end

def libraryName =
    cobolWord
end

def literal =
    ( numeric
    | alphanumericLiteral
    )
end

def numeric =
    ( integerLiteral
    | decimal
    | hexadecimal
    )
end

# -----------------------------------------------------------------------------
# Decimals
#
# Whether we're working on a decimal is something which can only be decided at
# parsing time. But it does require some lexer info.
#
# TODO Allow ",2"; which is still tricky.
def decimal =
    ( intgr %noskip ( (',' | '.') uintgr )
    | '.' %noskip uintgr
    )
end

def intgr =
    @INTEGER_LITERAL _
end

def uintgr =
    @UNSIGNED @INTEGER_LITERAL _
end

