// This ANTLR tree grammar was generated by Koopa.
// 
// WARNING: This tree parser is not guaranteed to compile or work as is.
// Instead it is mostly intended to be used as a base for setting up partial 
// tree parsers.

tree grammar CobolPreprocessingTreeParser;

options {
  tokenVocab = CobolPreprocessing;
  language = Java;
  output = none;
}

@header {
  package koopa.cobol.grammar.preprocessing.antlr;
}

// ========================================================
// preprocessing
// ........................................................

preprocessing
  : ^(PREPROCESSING
      ( ( (water)?
        preprocessingDirective
      ) )*
    )
  ;

// ========================================================
// preprocessingDirective
// ........................................................

preprocessingDirective
  : ^(PREPROCESSING_DIRECTIVE
      copyStatement
    )
  ;

// ========================================================
// copyStatement
// ........................................................

copyStatement
  : ^(COPY_STATEMENT
      ( 'COPY'
        textName
        ( ( ( 'OF'
        | 'IN'
        )
          libraryName
        ) )?
        ( 'SUPPRESS' )?
        ( copyReplacingPhrase )?
        '.'
      )
    )
  ;

// ========================================================
// copyReplacingPhrase
// ........................................................

copyReplacingPhrase
  : ^(COPY_REPLACING_PHRASE
      ( 'REPLACING'
        ( copyReplacementInstruction )+
      )
    )
  ;

// ========================================================
// copyReplacementInstruction
// ........................................................

copyReplacementInstruction
  : ^(COPY_REPLACEMENT_INSTRUCTION
      ( copyOperandName
        'BY'
        copyOperandName
      )
    )
  ;

// ========================================================
// copyOperandName
// ........................................................

copyOperandName
  : ^(COPY_OPERAND_NAME
      ( ( ( ( 'LEADING'
      | 'TRAILING'
      ) )?
        pseudoLiteral
      )
      | literal
      | cobolWord
      )
    )
  ;

// ========================================================
// textName
// ........................................................

textName
  : ^(TEXT_NAME
      ( cobolWord
      | alphanumericLiteral
      )
    )
  ;

// ========================================================
// libraryName
// ........................................................

libraryName
  : ^(LIBRARY_NAME
      cobolWord
    )
  ;

// ========================================================
// literal
// ........................................................

literal
  : ^(LITERAL
      ( numeric
      | alphanumericLiteral
      )
    )
  ;

// ========================================================
// numeric
// ........................................................

numeric
  : ^(NUMERIC
      ( integerLiteral
      | decimal
      | hexadecimal
      )
    )
  ;

// ========================================================
// decimal
// ........................................................

decimal
  : ^(DECIMAL
      ( ( intgr
        ( ( ( ','
        | '.'
        )
          uintgr
        )
        )
      )
      | ( '.'
        uintgr
      )
      )
    )
  ;

// ========================================================
// intgr
// ........................................................

intgr
  : INTGR
  ;

// ========================================================
// uintgr
// ........................................................

uintgr
  : UINTGR
  ;

// ========================================================

water
  : ^(WATER token*)
  ;

token
  : TOKEN
  | ','
  | '.'
  | 'BY'
  | 'COPY'
  | 'IN'
  | 'LEADING'
  | 'OF'
  | 'REPLACING'
  | 'SUPPRESS'
  | 'TRAILING'
  ;

// ========================================================

hexadecimal : ^(HEXADECIMAL token) ;

alphanumericLiteral : ^(ALPHANUMERIC_LITERAL token) ;

cobolWord : ^(COBOL_WORD token) ;

integerLiteral : ^(INTEGER_LITERAL token) ;

booleanLiteral : ^(BOOLEAN_LITERAL token) ;

pseudoLiteral : ^(PSEUDO_LITERAL token) ;

