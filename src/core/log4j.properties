log4j.rootLogger=ERROR, CONSOLE

log4j.appender.CONSOLE=org.apache.log4j.ConsoleAppender
 
log4j.appender.CONSOLE.layout=org.apache.log4j.PatternLayout
log4j.appender.CONSOLE.layout.ConversionPattern=[%t:%p] %c: %m%n

# Uncomment to see what's going on in the compiler directives tokenizer stage.
# log4j.logger.tokenising.compiler-directives=TRACE

# Uncomment to see what's going on in the program area tokenizing stage.
# log4j.logger.tokenising.programarea=TRACE

# Uncomment to see what's going on in the source formatting directives filter stage.
# log4j.logger.tokenising.source_formatting=TRACE

# Uncomment to see what's going on in the continuations tokenizing stage.
# log4j.logger.tokenising.continuations=TRACE

# Uncomment to see what's going on in the continuations welding tokenizer stage.
# log4j.logger.tokenising.continuation-welding=TRACE

# Uncomment to see what's going on in the separator tokenizer stage.
# log4j.logger.tokenising.separators=TRACE

# Uncomment to see what's going on in the context tokenizer stage.
# log4j.logger.tokenising.context=TRACE

# Uncomment to see what's going on in the preprocessing tokenizer stage.
# Choose DEBUG for info on preprocessing directives.
# Choose TRACE to see the actual tokens being generated.
# log4j.logger.tokenising.preprocessing=TRACE

# Uncomment to see what's going on in the test tokenizer stage.
# log4j.logger.tokenising.test=TRACE

# Uncomment to see what's going on with the grammar.
# log4j.logger.grammar=TRACE

# ParseStream output, useful for seeing what gets committed/rewound when.
# log4j.logger.parse.stream=TRACE
 
# ListTarget output, useful for seeing what gets committed when.
# log4j.logger.target.list=TRACE

# When working with partial ANTLR tree parsers, this will help you figure out
# what input is actually going into your tree parser.
# log4j.logger.ast.filteredstream=TRACE

# ToXml output.
# log4j.logger.to_xml=TRACE



# Tree Grammar/Parser output.
# log4j.logger.treestream=TRACE
# log4j.logger.treegrammar=TRACE

