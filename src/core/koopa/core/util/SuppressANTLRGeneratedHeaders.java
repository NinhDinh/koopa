package koopa.core.util;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.LinkedList;
import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

/**
 * ANTLR adds a date and timestamp to every file it generates. As I'm including
 * these generated files in the Koopa repo these generated files cause a lot of
 * spurious commits and, on the receiving side, merge conflicts...
 * <p>
 * This utility app walks a folder structure looking for files generated by
 * ANTLR, and tries to strip this date and time info from them.
 */
public class SuppressANTLRGeneratedHeaders {

	public static void main(String[] args) {
		for (String arg : args) {
			File path = new File(arg);

			if (path.exists())
				process(path);
		}
	}

	private static void process(File path) {
		if (path.isDirectory()) {
			for (File file : path.listFiles())
				process(file);

		} else if (generatedByANTLR(path)) {
			suppress(path);
		}
	}

	private static boolean generatedByANTLR(File path) {
		final String name = path.getName();

		if (name.endsWith("Lexer.java")) {
			String antlrSourceFileName = name.substring(0, name.length()
					- "Lexer.java".length())
					+ ".g";

			if (new File(path.getParentFile(), antlrSourceFileName).exists())
				return true;
		}

		if (name.endsWith("ParserCombinator.java")) {
			String antlrSourceFileName = name.substring(0, name.length()
					- "ParserCombinator.java".length())
					+ ".g";

			if (new File(path.getParentFile(), antlrSourceFileName).exists())
				return true;
		}

		if (name.endsWith(".java")) {
			String antlrSourceFileName = name.substring(0, name.length()
					- ".java".length())
					+ ".g";

			if (new File(path.getParentFile(), antlrSourceFileName).exists())
				return true;
		}

		return false;
	}

	private static void suppress(File path) {
		try {
			System.out.println("Processing " + path);
			List<String> lines = getSuppressedVersion(path);

			if (lines == null) {
				System.out
						.println("  This file had no known ANTLR generated header...");
				return;
			}

			System.out
					.println("  ANTLR generated header found ! Suppressing date and time info...");
			getSuppressedVersion(lines, path);

		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	private static final Pattern HEADER = Pattern
			.compile("^(// \\$ANTLR .*) \\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2}$");

	private static List<String> getSuppressedVersion(File path)
			throws IOException {

		BufferedReader br = null;
		try {
			List<String> lines = new LinkedList<String>();

			br = new BufferedReader(new FileReader(path));

			String line = null;
			int lineNumber = 0;

			while ((line = br.readLine()) != null) {
				lineNumber += 1;

				if (lineNumber == 1) {
					final Matcher matcher = HEADER.matcher(line);

					if (matcher.matches()) {
						line = matcher.group(1);
						lines.add(line);

					} else {
						return null;
					}

				} else {
					lines.add(line);
				}
			}

			return lines;

		} finally {
			try {
				if (br != null)
					br.close();

			} catch (IOException e) {
			}
		}
	}

	private static void getSuppressedVersion(List<String> lines, File path)
			throws IOException {

		BufferedWriter bw = null;

		try {
			bw = new BufferedWriter(new FileWriter(path));

			for (String line : lines) {
				bw.write(line);
				bw.newLine();
			}

		} finally {
			try {
				if (bw != null)
					bw.close();

			} catch (IOException e) {
			}
		}

	}

}
