group CSS;

stage(name, date, package, grammah, tokenizer, test) ::= <<
package $package$;

import junit.framework.TestCase;
import koopa.core.parsers.Parse;
import koopa.core.parsers.ParserCombinator;
import koopa.core.data.Token;
import koopa.core.sources.Source;
import koopa.core.sources.test.TestTokenizer;

import org.junit.Test;

/** This code was generated from $name$.stage. */
public class $name$Test extends TestCase {

  private static $grammah$ grammar = new $grammah$();

  private Source<Token> getTokenizer(String input) {
    return $tokenizer$.forSample(input);
  }

  $test; separator="\n\n"$
}
>>

accept(name, number, target, token) ::= <<
  @Test
  public void test$name$_$number$() {
    ParserCombinator parser = grammar.$target$();
    assertNotNull(parser);
    TestTokenizer tokenizer = new TestTokenizer(getTokenizer("$token$"));
    assertTrue(parser.accepts(Parse.of(tokenizer)));
    assertTrue(tokenizer.isWhereExpected());
  }
>>

reject(name, number, target, token) ::= <<
  @Test
  public void test$name$_$number$() {
    ParserCombinator parser = grammar.$target$();
    assertNotNull(parser);
    TestTokenizer tokenizer = new TestTokenizer(getTokenizer("$token$"));
    assertFalse(parser.accepts(Parse.of(tokenizer)) && tokenizer.isWhereExpected());
  }
>>
