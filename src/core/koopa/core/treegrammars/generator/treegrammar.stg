group TreeGrammar;

treegrammar(name, extending, package, imports, rule) ::= <<
// This tree grammar was generated by Koopa.

package $package$;

import koopa.core.grammars.Block;
import koopa.core.treegrammars.TreeGrammar;
import koopa.core.treeparsers.FutureTreeParser;
import koopa.core.treeparsers.TreeParser;

$if(imports)$
$imports$

$endif$
public class $name$TreeGrammar extends $extending$Grammar {

	$rule; separator="\n\n"$

}
>>


rule(name) ::= <<
// ========================================================
// $name$
// ........................................................

private TreeParser $name$Parser = null;

public TreeParser $name$() {
    if ($name$Parser == null) {
       FutureTreeParser future = scoped("$name$");
       $name$Parser = future;
       future.setParser(
           $body$
       );
    }

    return $name$Parser;
}
>>

sequence(step) ::= <<sequence(
    $step; separator=",\n"$
)
>>

token(text) ::= <<token("$text$")>>

call(name) ::= <<$name$()>>

star(body) ::= <<star(
    $body$
)>>

plus(body) ::= <<plus(
    $body$
)>>

any() ::= <<any()>>


assign(name, value) ::= <<assign("$name$", $value$)>>

bind(type, name) ::= <<$type$ $name$ = ($type$) scope.get("$name$");>>

unbind(name) ::= <<scope.set("$name$", $name$);>>

returning(name) ::= <<returning("$name$")>>

apply(bind, native_code, unbind) ::= <<apply(new Block() {
    public void apply() {
        $bind; separator="\n"$
        $native_code$
        $unbind; separator="\n"$
    }
})>>
